apiVersion: v1
kind: ConfigMap
metadata:
  name: gen-scripts
  namespace: zim
data:
  create_wp1_redirects.sh: |
    #/bin/sh

    echo "Starting create_wp1_redirects..."

    WP1_DIR=/var/www/download.openzim.org/wp1
    WP1_MAP=/etc/nginx/maps/wp1.map

    cat /dev/null > $WP1_MAP
    cd $WP1_DIR
    for TARGET in $(find . -mindepth 1 -maxdepth 1 -type d | sed -e 's/.\///' | sort -r)
    do
      REDIRECT=$(echo $TARGET | sed -e 's/_.*//')

      if ! grep "/wp1/$REDIRECT" $WP1_MAP > /dev/null
      then
        echo "~^/wp1/$REDIRECT(|[^_].*)\$ /wp1/$TARGET\$1;" >> $WP1_MAP
      fi
    done

    echo "> done"
  create_release_feeds.py: |
    #!/usr/bin/env python3

    import os
    import pathlib
    import subprocess
    import contextlib


    @contextlib.contextmanager
    def cwd(path):
        old_path = os.getcwd()
        os.chdir(path)
        yield path
        os.chdir(old_path)


    def create_feeds(root, org_name, base_url):
        root = pathlib.Path(root).expanduser().resolve()

        # loop on all folders
        for path in root.rglob("**/**"):
            if not path.is_dir():
                continue
            create_feed(root, path, org_name, base_url)


    def create_feed(root, folder, org_name, base_url):
        if str(folder.relative_to(root)) == ".":
            title = f"{org_name} releases"
        else:
            title = f"{org_name} {folder.stem} releases"

        with cwd(root):
            subprocess.run(
                [
                    "/usr/local/bin/genRSS.py",
                    "-H",
                    base_url,
                    "-t",
                    title,
                    "-C",  # sort by creation time
                    "-r",
                    "-e" "xz,gz,zip,apk,dmg,exe,appimage,appxbundle,flatpak,crx,xpi",
                    "-d",
                    str(folder.relative_to(root)),
                    "-o",
                    str(folder.relative_to(root) / "feed.xml"),
                ]
            )


    create_feeds(
        "/var/www/download.openzim.org/release",
        "OpenZIM",
        "https://download.openzim.org/release",
    )

    create_feeds(
        "/var/www/download.kiwix.org/release",
        "Kiwix",
        "https://download.kiwix.org/release",
    )
  create_release_redirects.pl: |
    #!/usr/bin/perl
    use utf8;
    use strict;
    use warnings;

    my $contentDirectoryPath = "/var/www/download.openzim.org";
    my $releaseDirectoryName = "release";
    my $releaseDirectoryPath = $contentDirectoryPath."/".$releaseDirectoryName;
    my $redirectsPath = "/etc/nginx/maps/openzim.map";

    my $content = "";
    $content .= "/".$releaseDirectoryName."/libzim/libzim.tar.xz ".getLastRelease("libzim-*.tar.xz").";\n";
    $content .= "/".$releaseDirectoryName."/libzim/libzim_linux-x86_64.tar.gz ".getLastRelease("libzim_linux-x86_64-*.tar.gz").";\n";
    $content .= "/".$releaseDirectoryName."/libzim/libzim_macos-x86_64.tar.gz ".getLastRelease("libzim_macos-x86_64-*.tar.gz").";\n";
    $content .= "/".$releaseDirectoryName."/zim-tools/zim-tools.tar.xz ".getLastRelease("zim-tools-*.tar.xz").";\n";
    $content .= "/".$releaseDirectoryName."/zim-tools/zim-tools_linux-x86_64.tar.gz ".getLastRelease("zim-tools_linux-x86_64-*.tar.gz").";\n";
    $content .= "/".$releaseDirectoryName."/zimwriterfs/zimwriterfs.tar.gz ".getLastRelease("zimwriterfs-*.tar.gz").";\n";
    $content .= "/".$releaseDirectoryName."/zimwriterfs/zimwriterfs_linux-x86_64.tar.gz ".getLastRelease("zimwriterfs_linux-x86_64-*.tar.gz").";\n";
    writeFile($redirectsPath, $content);

    sub getLastRelease {
        my ($regex) = @_;

        # Get list of files matching the regex
        my @files = split /\n/, `find "$releaseDirectoryPath" -name "$regex"`;

        # Version regex
        my $version_regex = $regex =~ s/\*/(.*)/r;

        # Last version
        my $file = (sort {
            $a =~ /$version_regex/;
            my $aa = $1 // $a;
            $b =~ /$version_regex/;
            my $bb = $1 // $b;
            $aa cmp $bb;
        } @files)[-1];

        # Not full path
        substr($file, length($contentDirectoryPath))
    }

    sub writeFile {
        my ($file, $data) = @_;
        utf8::encode($data);
        utf8::encode($file);
        open (FILE, ">", "$file") or die "Couldn't open file: $file";
        print FILE $data;
        close (FILE);
    }

    exit 0;
